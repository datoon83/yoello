{"version":3,"sources":["CartContext.js","Cart/reducer.js","SwipePanes/reducer.js","Cart.js","BeerModal.js","Beer.js","ListView.js","SwipeTab.js","App.js","serviceWorker.js","index.js"],"names":["CartContext","React","createContext","CartProvider","Provider","Consumer","cartInitialState","items","total","cart","state","action","type","found","find","x","id","beer","count","calculateTotal","filter","reduce","acc","item","abv","panesInitialState","activeIndex","maxPanes","swipePanes","Cart","useContext","cartDispatch","Table","Header","Row","HeaderCell","Body","map","Cell","Image","floated","style","height","width","src","image_url","name","Button","icon","onClick","Icon","Footer","BeerModal","open","onClose","Modal","key","basic","size","backgroundColor","color","Content","image","Description","tagline","description","food_pairing","food","primary","Beer","useState","showModal","setShowModal","Card","circular","Meta","ListView","beers","setBeers","urls","useEffect","fetch","then","response","json","data","Group","SwipeTab","dispatch","onSwipeRight","onSwipeLeft","Tab","Pane","App","useReducer","paneState","panes","menuItem","content","render","value","className","onTabChange","event","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c3928f7c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst CartContext = React.createContext({});\r\n\r\nexport const CartProvider = CartContext.Provider;\r\nexport const CartConsumer = CartContext.Consumer;\r\n\r\nexport default CartContext","export const cartInitialState = {\r\n    items: [],\r\n    total: 0,\r\n}\r\n\r\nexport const cart = (state, action) => {\r\n    if(action.type === 'add_to_cart') {\r\n        const found = state.items.find(x => x.id === action.beer.id)\r\n        if(found) {\r\n            ++found.count\r\n            return {\r\n                items: [...state.items],\r\n                total: calculateTotal(state.items)\r\n            }\r\n        } \r\n        const items = [ ...state.items, { ...action.beer, count: 1 }]\r\n        return {\r\n            items,\r\n            total: calculateTotal(items)\r\n        }\r\n    }\r\n    if(action.type === 'remove_from_cart') {\r\n        const items = state.items.filter(x => x.id !== action.beer.id)\r\n        return { \r\n            items,\r\n            total: calculateTotal(items)\r\n        }\r\n    }\r\n}\r\n\r\nconst calculateTotal = items => {\r\n    return items.reduce((acc, item) => { \r\n        acc += item.abv * item.count\r\n        return acc\r\n    }, 0)\r\n}","export const panesInitialState = {\r\n    activeIndex: 0,\r\n    maxPanes: 2\r\n}\r\n\r\nexport const swipePanes = (state, action) => {\r\n    switch(action.type) {\r\n        case \"right\": {\r\n            if(state.activeIndex === state.maxPanes)\r\n                return { ...state, activeIndex: state.activeIndex }\r\n            else\r\n                return { ...state, activeIndex: state.activeIndex + 1 }\r\n        }\r\n        case \"left\": {\r\n            if(state.activeIndex === 0)\r\n                return { ...state, activeIndex: state.activeIndex }\r\n            else\r\n                return { ...state, activeIndex: state.activeIndex - 1 }\r\n        }\r\n        case \"change\":\r\n            return { ...state, activeIndex: action.activeIndex }\r\n        default:\r\n            return state\r\n    }\r\n}","import React, { useContext } from 'react';\r\nimport { Table, Image, Button, Icon } from 'semantic-ui-react';\r\nimport CartContext from './CartContext.js'\r\n\r\nconst Cart = () => {\r\n    const { state, cartDispatch } = useContext(CartContext);\r\n\r\n    return (\r\n        <Table>\r\n            <Table.Header>\r\n                <Table.Row>\r\n                    <Table.HeaderCell />\r\n                    <Table.HeaderCell>Beer</Table.HeaderCell>\r\n                    <Table.HeaderCell>Amount</Table.HeaderCell>\r\n                    <Table.HeaderCell>Cost</Table.HeaderCell>\r\n                    <Table.HeaderCell />\r\n                </Table.Row>\r\n            </Table.Header>\r\n            <Table.Body>\r\n            {state.items.map(beer => \r\n                {\r\n                    return (<Table.Row>\r\n                        <Table.Cell>\r\n                            <Image floated='right' style={{ height: '100px', width: 'auto' }} src={beer.image_url}/>\r\n                        </Table.Cell>\r\n                        <Table.Cell>\r\n                            {beer.name}\r\n                        </Table.Cell>\r\n                        <Table.Cell>\r\n                            {beer.count}\r\n                        </Table.Cell>\r\n                        <Table.Cell>\r\n                            Â£{beer.abv}\r\n                        </Table.Cell>\r\n                        <Table.Cell>\r\n                            <Button icon onClick={() => cartDispatch({ type: 'remove_from_cart', beer })}>\r\n                                <Icon name='trash' />\r\n                            </Button>\r\n                        </Table.Cell>\r\n                    </Table.Row>\r\n                    )\r\n                })\r\n            }\r\n            </Table.Body>\r\n            <Table.Footer>\r\n                <Table.Row>\r\n                    <Table.Cell />\r\n                    <Table.Cell />\r\n                    <Table.Cell>Total</Table.Cell>\r\n                    <Table.Cell>Â£{state.total}</Table.Cell>\r\n                </Table.Row>\r\n            </Table.Footer>\r\n        </Table>\r\n    )\r\n}\r\n\r\nexport default Cart;","import React, { useContext } from 'react';\r\nimport { Modal, Button, Image, Header } from 'semantic-ui-react';\r\nimport CartContext from './CartContext.js'\r\n\r\nconst BeerModal = ({ open, onClose, beer }) => {\r\n    const { cartDispatch } = useContext(CartContext);\r\n\r\n    return (\r\n    <Modal key={beer.id} open={open} basic size='small' onClose={onClose} style={ { backgroundColor: 'white', color: 'black' } } >\r\n    <Modal.Header style={ { color: 'black' } }>{beer.name}</Modal.Header>\r\n    <Modal.Content image>\r\n      <Image style={{ height: '150px', width: 'auto' }} src={beer.image_url} />\r\n      <Modal.Description>\r\n        <Header>{beer.tagline}</Header>\r\n        <p>\r\n          {beer.abv}\r\n        </p>\r\n        <p>{beer.description}</p>\r\n        <ul>\r\n            {beer.food_pairing.map(food => <li>{food}</li>)}\r\n        </ul>\r\n        <Button primary onClick={() => cartDispatch({type: 'add_to_cart', beer })}>Add to Cart</Button>\r\n      </Modal.Description>\r\n    </Modal.Content>\r\n    </Modal>)\r\n}\r\n\r\nexport default BeerModal;","import React, { useState } from 'react';\r\nimport { Card, Image } from 'semantic-ui-react';\r\nimport BeerModal from './BeerModal.js';\r\n\r\nconst Beer = ({ beer }) => {\r\n    const [ showModal, setShowModal ] = useState(false);\r\n\r\n    return (<Card onClick={() => setShowModal(true) }>\r\n        <Card.Content>\r\n        <Image circular style={{ height: '100px', width: 'auto' }} src={beer.image_url} />\r\n        <Card.Header>\r\n        {beer.name}\r\n        </Card.Header>\r\n        <Card.Meta>\r\n        {beer.abv}\r\n        </Card.Meta>\r\n        </Card.Content>\r\n\r\n        <BeerModal open={showModal} onClose={() => setShowModal(false) } beer={beer} />\r\n        </Card>\r\n        )\r\n}\r\n\r\nexport default Beer;","import React, { useEffect, useState } from 'react';\r\nimport { Card } from 'semantic-ui-react';\r\nimport Beer from './Beer.js';\r\n\r\nconst ListView = ({ food }) => {\r\n  const [ beers, setBeers ] = useState([]);\r\n\r\n  const urls = {\r\n    'all': 'https://api.punkapi.com/v2/beers',\r\n    'pizza': 'https://api.punkapi.com/v2/beers?food=pizza',\r\n    'steak': 'https://api.punkapi.com/v2/beers?food=steak'\r\n};\r\n\r\nuseEffect(() => {\r\n    fetch(urls[food])\r\n    .then(response => response.json())\r\n    .then(data => setBeers(data));\r\n}, [beers]);\r\n\r\nreturn (<Card.Group>\r\n    {beers.map(beer => <Beer key={beer.id} beer={beer} />)}\r\n    </Card.Group>)\r\n}\r\n\r\nexport default ListView;","import React from 'react';\r\nimport { Tab } from 'semantic-ui-react';\r\nimport Swipe from 'react-easy-swipe';\r\nimport ListView from './ListView.js';\r\n\r\nconst SwipeTab = ({ dispatch, food }) => (\r\n    <Swipe onSwipeRight={() => dispatch({type: 'right' })} onSwipeLeft={() => dispatch({type: 'left'})}>\r\n    <Tab.Pane>\r\n    <ListView food={food} />\r\n    </Tab.Pane>\r\n    </Swipe>)\r\n\r\nexport default SwipeTab;","import React, { useReducer } from 'react';\nimport './App.css';\nimport { Tab } from 'semantic-ui-react';\nimport { CartProvider } from './CartContext.js'\nimport { cart, cartInitialState } from './Cart/reducer.js';\nimport { swipePanes, panesInitialState } from './SwipePanes/reducer.js';\nimport Cart from './Cart.js';\nimport SwipeTab from './SwipeTab.js';\n\nfunction App() {\n    const [paneState, dispatch] = useReducer(swipePanes, panesInitialState)\n    const [state, cartDispatch] = useReducer(cart, cartInitialState)\n\n    const panes = [ {\n        menuItem: { key: 'BeersWithPizza', icon: 'food', content: 'Beers with Pizza' },\n        render: () => <SwipeTab dispatch={dispatch} food='pizza' />,\n    }, {\n        menuItem: { key: 'BeersWithSteak', icon: 'users', content: 'Beers with Steak' },\n        render: () => <SwipeTab dispatch={dispatch} food='steak' />,\n    }, {\n        menuItem: { key: 'AllBeers', icon: 'beer', content: 'All Beers' },\n        render: () => <SwipeTab dispatch={dispatch} food='all' />,\n    }, ]\n\n  return (\n    <CartProvider value={{ state, cartDispatch }}>\n        <div className=\"App\">\n            <Tab activeIndex={paneState.activeIndex} onTabChange={(event, data) => dispatch({type: 'change', activeIndex: data.activeIndex })} panes={panes} />\n        </div>\n        <Cart/>\n    </CartProvider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}